//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calculator.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalc")]
    public interface ICalc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Add", ReplyAction="http://tempuri.org/ICalc/AddResponse")]
        decimal Add(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Add", ReplyAction="http://tempuri.org/ICalc/AddResponse")]
        System.Threading.Tasks.Task<decimal> AddAsync(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Subtract", ReplyAction="http://tempuri.org/ICalc/SubtractResponse")]
        decimal Subtract(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Subtract", ReplyAction="http://tempuri.org/ICalc/SubtractResponse")]
        System.Threading.Tasks.Task<decimal> SubtractAsync(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiply", ReplyAction="http://tempuri.org/ICalc/MultiplyResponse")]
        decimal Multiply(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Multiply", ReplyAction="http://tempuri.org/ICalc/MultiplyResponse")]
        System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Divide", ReplyAction="http://tempuri.org/ICalc/DivideResponse")]
        decimal Divide(decimal a, decimal b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalc/Divide", ReplyAction="http://tempuri.org/ICalc/DivideResponse")]
        System.Threading.Tasks.Task<decimal> DivideAsync(decimal a, decimal b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcChannel : Calculator.ServiceReference1.ICalc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcClient : System.ServiceModel.ClientBase<Calculator.ServiceReference1.ICalc>, Calculator.ServiceReference1.ICalc {
        
        public CalcClient() {
        }
        
        public CalcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal Add(decimal a, decimal b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<decimal> AddAsync(decimal a, decimal b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public decimal Subtract(decimal a, decimal b) {
            return base.Channel.Subtract(a, b);
        }
        
        public System.Threading.Tasks.Task<decimal> SubtractAsync(decimal a, decimal b) {
            return base.Channel.SubtractAsync(a, b);
        }
        
        public decimal Multiply(decimal a, decimal b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<decimal> MultiplyAsync(decimal a, decimal b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public decimal Divide(decimal a, decimal b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<decimal> DivideAsync(decimal a, decimal b) {
            return base.Channel.DivideAsync(a, b);
        }
    }
}
